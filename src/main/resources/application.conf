http {
    host = "localhost"
    port = 8080
}

akka {
    extensions = [akka.persistence.Persistence]
    actor{
        provider = "cluster"
        allow-java-serialization = on
        warn-about-java-serializer-usage = off
    }
    remote.artery {
        canonical {
            hostname = "127.0.0.1"
            port = 2551
        }
    }
    persistence {
        journal {
            auto-start-journals = [
                "lerna.akka.entityreplication.raft.persistence.cassandra.journal",
                "lerna.akka.entityreplication.raft.eventhandler.persistence.cassandra.journal",
            ]
        }

        snapshot-store {
            auto-start-snapshot-stores = [
                "lerna.akka.entityreplication.raft.persistence.cassandra.snapshot",
            ]
        }
    }
    cluster {
        seed-nodes = [
            "akka://ExampleSystem@127.0.0.1:2551"
        ]
        downing-provider-class = "akka.cluster.sbr.SplitBrainResolverProvider"
        split-brain-resolver {
            active-strategy = keep-majority
            stable-after = 20s
            down-all-when-unstable = on
        }
    }
    loggers = ["akka.event.slf4j.Slf4jLogger"]
    loglevel = "DEBUG"
    logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
}

akka.cluster.split-brain-resolver {
    active-strategy = keep-majority
    stable-after = 20s
    down-all-when-unstable = on
}

lerna.akka.entityreplication.raft {
    persistence.cassandra {
        journal {
            data-center-replication-factors = ["datacenter1:1"]
            local-datacenter = "datacenter1"
        }
        snapshot {
            data-center-replication-factors = ["datacenter1:1"]
            local-datacenter = "datacenter1"
        }
    }
    eventhandler.persistence.cassandra {
        journal {
            data-center-replication-factors = ["datacenter1:1"]
            local-datacenter = "datacenter1"
        }
    }
}